                            | # 姓名：孙少凡
                            | # ID：2100013085@stu.pku.edu.cn
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp
0x00a: 804800000000000000   | 	call main
0x013: 00                   | 	halt
                            | 
                            | # Array of 6 elements
0x018:                      | .align 8
0x018:                      | array:
0x018: ca0b000000000000     | 	.quad 0xbca
0x020: ba0c000000000000     | 	.quad 0xcba
0x028: cb0a000000000000     | 	.quad 0xacb
0x030: ab0c000000000000     | 	.quad 0xcab
0x038: bc0a000000000000     | 	.quad 0xabc
0x040: ac0b000000000000     | 	.quad 0xbac
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq array,%rdi		
0x052: 30f60600000000000000 | 	irmovq $6,%rsi
0x05c: 806600000000000000   | 	call bubble_sort
0x065: 90                   | 	ret
                            | 
                            | # void bubble_sort(long *data, long count)
                            | # data in %rdi, count in %rsi
0x066:                      | bubble_sort:
0x066: 30f80100000000000000 | 	irmovq $1,%r8			# constant 1
0x070: 30f90800000000000000 | 	irmovq $8,%r9			# constant 8
0x07a: 207a                 | 	rrmovq %rdi,%r10		# last = data
0x07c: 206b                 | 	rrmovq %rsi,%r11	
0x07e:                      | loop1:					# let last = data + count - 1
0x07e: 618b                 | 	subq %r8,%r11			# count - 1 and set CC
0x080: 739400000000000000   | 	je	loop2			# 0, last = data + count - 1
0x089: 609a                 | 	addq %r9,%r10			# last++
0x08b: 707e00000000000000   | 	jmp	loop1
0x094:                      | loop2:
0x094: 617a                 | 	subq %rdi,%r10			# test (last - data)
0x096: 73fb00000000000000   | 	je	exdone			# last == data
0x09f: 607a                 | 	addq %rdi,%r10
0x0a1: 207b                 | 	rrmovq %rdi,%r11		# i = data
0x0a3:                      | loop3:
0x0a3: 61ab                 | 	subq %r10,%r11			# test (i - last)
0x0a5: 73f000000000000000   | 	je	indone			# i == last
0x0ae: 60ab                 | 	addq %r10,%r11
0x0b0: 50cb0000000000000000 | 	mrmovq (%r11),%r12		# *i
0x0ba: 50db0800000000000000 | 	mrmovq 8(%r11),%r13		# t = *(i + 1)
0x0c4: 61cd                 | 	subq %r12,%r13			# test (*(i+1) - *i)
0x0c6: 75e500000000000000   | 	jge	false			# *(i+1) >= *i
0x0cf: 60cd                 | 	addq %r12,%r13
0x0d1: 40cb0800000000000000 | 	rmmovq %r12,8(%r11)		# *(i+1) = *i
0x0db: 40db0000000000000000 | 	rmmovq %r13,(%r11)		# *i = t
0x0e5:                      | false:
0x0e5: 609b                 | 	addq %r9,%r11			# i++
0x0e7: 70a300000000000000   | 	jmp	loop3
0x0f0:                      | indone:
0x0f0: 619a                 | 	subq %r9,%r10			# last--
0x0f2: 709400000000000000   | 	jmp	loop2
0x0fb:                      | exdone:
0x0fb: 90                   | 	ret
                            | 
                            | # Stack here
0x200:                      | 	.pos 0x200
0x200:                      | stack:
