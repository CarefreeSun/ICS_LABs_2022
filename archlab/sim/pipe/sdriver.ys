#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 孙少凡 2100013085@stu.pku.edu.cn
# Describe how and why you modified the baseline code.
# 1.删去了xorq %rax, %rax(初始化恰好是0， 该语句在此无用)
# 2.在pipe-full.hcl中增加了iaddq，简化了立即数与寄存器值相加的代码
# 3.将循环做10*1展开（经尝试10大致是10及以下最优，而10会使字节数接近上限1000Byte）
# 4.在pipe-full.hcl中增加了加载转发，以取消部分不必要的装载/使用冒险。最重要的一环！
# 5.余数采取打表策略，利用一棵二叉搜索树跳转（试验过直接打表，2*1循环展开等等，效果均不理想）
# 6.二叉搜索树结构如下：（试验调整得出的较优策略）
#   另外跳转的时候要尽量先往左跳（因为测试到64，所以1，2，3，4会比其他数多出现1次，尽量先走）
#   以及往节点数多的子树跳
#                 4
#               /   \
#             2       6
#           /   \   /   \
#          1     3 5     8
#         /            /   \ 
#        0            7     9
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
    # Loop header
    iaddq $-9, %rdx        # len <= 9?
    jle     BST            # if so, goto BST:

# 10*1 Loop Unrolling
Flag1:    
    mrmovq (%rdi), %r10         # read val from src...
    rmmovq %r10, (%rsi)         # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag2            # if so, goto Flag2:
    iaddq $1, %rax              # count++
Flag2:    
    mrmovq 0x8(%rdi), %r10      # read val from src...
    rmmovq %r10, 0x8(%rsi)      # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag3            # if so, goto Flag3:
    iaddq $1, %rax              # count++
Flag3:    
    mrmovq 0x10(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x10(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag4            # if so, goto Flag4:
    iaddq $1, %rax              # count++
Flag4:    
    mrmovq 0x18(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x18(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag5            # if so, goto Flag5:
    iaddq $1, %rax              # count++
Flag5:    
    mrmovq 0x20(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x20(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag6            # if so, goto Flag6:
    iaddq $1, %rax              # count++
Flag6:    
    mrmovq 0x28(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x28(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag7            # if so, goto Flag7:
    iaddq $1, %rax              # count++
Flag7:    
    mrmovq 0x30(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x30(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag8            # if so, goto Flag8:
    iaddq $1, %rax              # count++
Flag8:    
    mrmovq 0x38(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x38(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag9            # if so, goto Flag9:
    iaddq $1, %rax              # count++
Flag9:    
    mrmovq 0x40(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x40(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Flag10           # if so, goto Flag10:
    iaddq $1, %rax              # count++
Flag10:    
    mrmovq 0x48(%rdi), %r10     # read val from src...
    rmmovq %r10, 0x48(%rsi)     # ...and store it to dst
    andq %r10, %r10             # val <= 0?
    jle        Npos             # if so, goto Nops:
    iaddq $1, %rax              # count++
Npos:
	iaddq $0x50, %rdi		    # src+=10
	iaddq $0x50, %rsi		    # dst+=10
	iaddq $-10, %rdx		    # len-=10 and test if(len > 0)
	jg 	Flag1				    # if so, goto Flag1:

# BST of 0~9
BST:                            
    iaddq $5, %rdx              # len ? 4 (have -9 at begin)
    jl      LChild              # len < 4
    jg      RChild              # len > 4
    je      Node4               # len == 4, goto Node4
LChild:
    iaddq $2, %rdx              # len ? 2
    je      Node2               # len == 2, goto Node2
    jg      Node3               # len == 3, goto Node3
    iaddq $1, %rdx              # len ? 1
    je      Node1               # len == 1, goto Node1
    ret                         # len == 0, return
RChild:
    iaddq $-2, %rdx             # len ? 6
    jg      RRChild             # len > 6
    je      Node6               # len == 6, goto Node6
    jl      Node5               # len == 5, goto Node5
RRChild:
    iaddq $-2, %rdx             # len ? 8
    jl      Node7               # len == 7, goto Node7
    je      Node8               # len == 8, goto Node8

# Table of 1~9
Node9:
    mrmovq  0x40(%rdi), %r8
    rmmovq  %r8, 0x40(%rsi)
    andq %r8, %r8
    jle     Node8
    iaddq $1, %rax
Node8:
    mrmovq  0x38(%rdi), %r8
    rmmovq  %r8, 0x38(%rsi)
    andq %r8, %r8
    jle     Node7
    iaddq $1, %rax
Node7:
    mrmovq  0x30(%rdi), %r8
    rmmovq  %r8, 0x30(%rsi)
    andq %r8, %r8
    jle     Node6
    iaddq $1, %rax
Node6:
    mrmovq  0x28(%rdi), %r8
    rmmovq  %r8, 0x28(%rsi)
    andq %r8, %r8
    jle     Node5
    iaddq $1, %rax
Node5:
    mrmovq  0x20(%rdi), %r8
    rmmovq  %r8, 0x20(%rsi)
    andq %r8, %r8
    jle     Node4
    iaddq $1, %rax
Node4:
    mrmovq  0x18(%rdi), %r8
    rmmovq  %r8, 0x18(%rsi)
    andq %r8, %r8
    jle     Node3
    iaddq $1, %rax
Node3:
    mrmovq  0x10(%rdi), %r8
    rmmovq  %r8, 0x10(%rsi)
    andq %r8, %r8
    jle     Node2
    iaddq $1, %rax
Node2:
    mrmovq  0x8(%rdi), %r8
    rmmovq  %r8, 0x8(%rsi)
    andq %r8, %r8
    jle     Node1
    iaddq $1, %rax
Node1:
    mrmovq  (%rdi), %r8
    rmmovq  %r8, (%rsi)
    andq %r8, %r8
    jle     Done
    iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
