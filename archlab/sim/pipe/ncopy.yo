                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 孙少凡 2100013085@stu.pku.edu.cn
                            | # Describe how and why you modified the baseline code.
                            | # 1.删去了xorq %rax, %rax(初始化恰好是0， 该语句在此无用)
                            | # 2.在pipe-full.pcl中增加了iaddq，简化了立即数与寄存器值相加的代码
                            | # 3.将循环做10*1展开（经尝试10大致是10及以下最优，而10会使字节数接近上限1000Byte）
                            | # 4.尽可能在load操作并下一步就要使用相应寄存器的两条代码间插入其他有效代码，以避免装载/使用冒险。最重要的一环！
                            | # （策略为将复制连续内存块的代码交替编写，但代码可读性因此显著下降）
                            | # 5.余数采取打表策略，利用一棵二叉搜索树跳转（试验过直接打表，2*1循环展开等等，效果均不理想）
                            | # 6.二叉搜索树结构如下：（试验调整得出的较优解，不知是否有更优解。所试验的树里其他的要么卡字节数，要么性能略差）
                            | #   另外跳转的时候要尽量先往左跳（因为测试到64，所以1，2，3，4会比其他数多出现1次，尽量先走）
                            | #   以及往节点数多的子树跳
                            | #                 4
                            | #               /   \
                            | #             1       6
                            | #           /   \   /   \
                            | #          0     3 5     8
                            | #               /      /   \ 
                            | #              2      7     9
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |     # Loop header
0x000: c0f2f7ffffffffffffff |     iaddq $-9, %rdx        # len <= 9?
0x00a: 71d401000000000000   |     jle     BST            # if so, goto BST:
                            | 
                            | # 10*1 Loop Unrolling
0x013:                      | Flag1:    
0x013: 50a70000000000000000 |     mrmovq (%rdi), %r10        # read val from src...
0x01d: 50970800000000000000 |     mrmovq 0x8(%rdi), %r9    
0x027: 40a60000000000000000 |     rmmovq %r10, (%rsi)        # ...and store it to dst
0x031: 40960800000000000000 |     rmmovq %r9, 0x8(%rsi)
0x03b: 62aa                 |     andq %r10, %r10         # val <= 0?
0x03d: 715000000000000000   |     jle        Flag2            # if so, goto Flag2:
0x046: c0f00100000000000000 |     iaddq $1, %rax             # count++
0x050:                      | Flag2:    
0x050: 6299                 |     andq %r9, %r9             # val <= 0?
0x052: 716500000000000000   |     jle        Flag3            # if so, goto Flag3:
0x05b: c0f00100000000000000 |     iaddq $1, %rax             # count++
0x065:                      | Flag3:    
0x065: 50a71000000000000000 |     mrmovq 0x10(%rdi), %r10     # read val from src...
0x06f: 50971800000000000000 |     mrmovq 0x18(%rdi), %r9
0x079: 40a61000000000000000 |     rmmovq %r10, 0x10(%rsi)     # ...and store it to dst
0x083: 40961800000000000000 |     rmmovq %r9, 0x18(%rsi)
0x08d: 62aa                 |     andq %r10, %r10             # val <= 0?
0x08f: 71a200000000000000   |     jle        Flag4            # if so, goto Flag4:
0x098: c0f00100000000000000 |     iaddq $1, %rax              # count++
0x0a2:                      | Flag4:    
0x0a2: 6299                 |     andq %r9, %r9               # val <= 0?
0x0a4: 71b700000000000000   |     jle        Flag5            # if so, goto Flag5:
0x0ad: c0f00100000000000000 |     iaddq $1, %rax              # count++
0x0b7:                      | Flag5:    
0x0b7: 50a72000000000000000 |     mrmovq 0x20(%rdi), %r10     # read val from src...
0x0c1: 50972800000000000000 |     mrmovq 0x28(%rdi), %r9    
0x0cb: 40a62000000000000000 |     rmmovq %r10, 0x20(%rsi)     # ...and store it to dst
0x0d5: 40962800000000000000 |     rmmovq %r9, 0x28(%rsi)
0x0df: 62aa                 |     andq %r10, %r10             # val <= 0?
0x0e1: 71f400000000000000   |     jle        Flag6            # if so, goto Flag6:
0x0ea: c0f00100000000000000 |     iaddq $1, %rax              # count++
0x0f4:                      | Flag6:    
0x0f4: 6299                 |     andq %r9, %r9               # val <= 0?
0x0f6: 710901000000000000   |     jle        Flag7            # if so, goto Flag7:
0x0ff: c0f00100000000000000 |     iaddq $1, %rax              # count++
0x109:                      | Flag7:    
0x109: 50a73000000000000000 |     mrmovq 0x30(%rdi), %r10     # read val from src...
0x113: 50973800000000000000 |     mrmovq 0x38(%rdi), %r9    
0x11d: 40a63000000000000000 |     rmmovq %r10, 0x30(%rsi)     # ...and store it to dst
0x127: 40963800000000000000 |     rmmovq %r9, 0x38(%rsi)
0x131: 62aa                 |     andq %r10, %r10             # val <= 0?
0x133: 714601000000000000   |     jle        Flag8            # if so, goto Flag8:
0x13c: c0f00100000000000000 |     iaddq $1, %rax              # count++
0x146:                      | Flag8:	
0x146: 6299                 | 	andq %r9, %r9	 		    # val <= 0?
0x148: 715b01000000000000   | 	jle		Flag9			    # if so, goto Flag9:
0x151: c0f00100000000000000 | 	iaddq $1, %rax 			    # count++
0x15b:                      | Flag9:	
0x15b: 50a74000000000000000 | 	mrmovq 0x40(%rdi), %r10	    # read val from src...
0x165: 50974800000000000000 | 	mrmovq 0x48(%rdi), %r9	
0x16f: 40a64000000000000000 | 	rmmovq %r10, 0x40(%rsi)	    # ...and store it to dst
0x179: 40964800000000000000 | 	rmmovq %r9, 0x48(%rsi)
0x183: 62aa                 | 	andq %r10, %r10 		    # val <= 0?
0x185: 719801000000000000   | 	jle		Flag10			    # if so, goto Flag10:
0x18e: c0f00100000000000000 | 	iaddq $1, %rax 			    # count++
0x198:                      | Flag10:	
0x198: 6299                 | 	andq %r9, %r9	 		    # val <= 0?
0x19a: 71ad01000000000000   | 	jle		Npos			    # if so, goto Npos:
0x1a3: c0f00100000000000000 | 	iaddq $1, %rax 			    # count++
0x1ad:                      | Npos:
0x1ad: c0f75000000000000000 | 	iaddq $0x50, %rdi		    # src+=10
0x1b7: c0f65000000000000000 | 	iaddq $0x50, %rsi		    # dst+=10
0x1c1: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx		    # len-=10 and test if(len > 0)
0x1cb: 761300000000000000   | 	jg 	Flag1				    # if so, goto Flag1:
                            | 
                            | # BST of 0~9
0x1d4:                      | BST:                            
0x1d4: c0f20500000000000000 |     iaddq $5, %rdx              # len ? 4 (have -9 at begin)
0x1de: 72f901000000000000   |     jl      LChild              # len < 4
0x1e7: 763302000000000000   |     jg      RChild              # len > 4
0x1f0: 732e03000000000000   |     je      Node4               # len == 4, goto Node4
0x1f9:                      | LChild:
0x1f9: c0f20300000000000000 |     iaddq $3, %rdx              # len ? 1
0x203: 73a903000000000000   |     je      Node1               # len == 1, goto Node1
0x20c: c0f2feffffffffffffff |     iaddq $-2, %rdx             # len ? 3
0x216: 735703000000000000   |     je      Node3               # len == 3, goto Node3
0x21f: c0f20100000000000000 |     iaddq $1, %rdx              # len ? 2
0x229: 738003000000000000   |     je      Node2               # len == 2, goto Node2
0x232: 90                   |     ret                         # len == 0, return
0x233:                      | RChild:
0x233: c0f2feffffffffffffff |     iaddq $-2, %rdx             # len ? 6
0x23d: 765802000000000000   |     jg      RRChild             # len > 6
0x246: 73dc02000000000000   |     je      Node6               # len == 6, goto Node6
0x24f: 720503000000000000   |     jl      Node5               # len == 5, goto Node5
0x258:                      | RRChild:
0x258: c0f2feffffffffffffff |     iaddq $-2, %rdx             # len ? 8
0x262: 72b302000000000000   |     jl      Node7               # len == 7, goto Node7
0x26b: 738a02000000000000   |     je      Node8               # len == 8, goto Node8
                            | 
                            | # Table of 1~9
0x274:                      | Node9:
0x274: 50874000000000000000 |     mrmovq  0x40(%rdi), %r8
0x27e: 40864000000000000000 |     rmmovq  %r8, 0x40(%rsi)
0x288: 6288                 |     andq %r8, %r8
0x28a:                      | Node8:
0x28a: 50873800000000000000 |     mrmovq 0x38(%rdi), %r8
0x294: 71a702000000000000   |     jle     Node8r
0x29d: c0f00100000000000000 |     iaddq $1, %rax
0x2a7:                      | Node8r:
0x2a7: 40863800000000000000 |     rmmovq %r8, 0x38(%rsi)
0x2b1: 6288                 |     andq %r8, %r8
0x2b3:                      | Node7:
0x2b3: 50873000000000000000 |     mrmovq 0x30(%rdi), %r8
0x2bd: 71d002000000000000   |     jle     Node7r
0x2c6: c0f00100000000000000 |     iaddq $1, %rax
0x2d0:                      | Node7r:
0x2d0: 40863000000000000000 |     rmmovq %r8, 0x30(%rsi)
0x2da: 6288                 |     andq %r8, %r8
0x2dc:                      | Node6:
0x2dc: 50872800000000000000 |     mrmovq 0x28(%rdi), %r8
0x2e6: 71f902000000000000   |     jle     Node6r
0x2ef: c0f00100000000000000 |     iaddq $1, %rax
0x2f9:                      | Node6r:              
0x2f9: 40862800000000000000 |     rmmovq %r8, 0x28(%rsi)
0x303: 6288                 |     andq %r8, %r8
0x305:                      | Node5:
0x305: 50872000000000000000 |     mrmovq 0x20(%rdi), %r8
0x30f: 712203000000000000   |     jle     Node5r
0x318: c0f00100000000000000 |     iaddq $1, %rax
0x322:                      | Node5r:
0x322: 40862000000000000000 |     rmmovq %r8, 0x20(%rsi)
0x32c: 6288                 |     andq %r8, %r8
0x32e:                      | Node4:
0x32e: 50871800000000000000 |     mrmovq 0x18(%rdi), %r8
0x338: 714b03000000000000   |     jle     Node4r
0x341: c0f00100000000000000 |     iaddq $1, %rax
0x34b:                      | Node4r:
0x34b: 40861800000000000000 |     rmmovq %r8, 0x18(%rsi)
0x355: 6288                 |     andq %r8, %r8
0x357:                      | Node3:
0x357: 50871000000000000000 |     mrmovq 0x10(%rdi), %r8
0x361: 717403000000000000   |     jle     Node3r
0x36a: c0f00100000000000000 |     iaddq $1, %rax
0x374:                      | Node3r:
0x374: 40861000000000000000 |     rmmovq %r8, 0x10(%rsi)
0x37e: 6288                 |     andq %r8, %r8
0x380:                      | Node2:
0x380: 50870800000000000000 |     mrmovq 0x8(%rdi), %r8
0x38a: 719d03000000000000   |     jle     Node2r
0x393: c0f00100000000000000 |     iaddq $1, %rax
0x39d:                      | Node2r:
0x39d: 40860800000000000000 |     rmmovq %r8, 0x8(%rsi)
0x3a7: 6288                 |     andq %r8, %r8
0x3a9:                      | Node1:
0x3a9: 50870000000000000000 |     mrmovq (%rdi), %r8
0x3b3: 71c603000000000000   |     jle     Node1r
0x3bc: c0f00100000000000000 |     iaddq $1, %rax
0x3c6:                      | Node1r:
0x3c6: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x3d0: 6288                 |     andq %r8, %r8
0x3d2: 71e503000000000000   |     jle     Done
0x3db: c0f00100000000000000 |     iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3e5:                      | Done:
0x3e5: 90                   |     ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3e6:                      | End:
                            | #/* $end ncopy-ys */
